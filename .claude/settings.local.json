{
  "permissions": {
    "allow": [
      "Bash(curl:*)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" debug_rag.py)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" debug_detailed.py)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" test_fresh_upload.py)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" test_final_rag.py)",
      "Bash(start_app.bat)",
      "Bash(call start_app.bat)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" test_metadata_reload.py)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" debug_metadata_state.py)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" test_empty_metadata.py)",
      "Bash(taskkill:*)",
      "Bash(kill:*)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" test_chat_debug.py)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" test_final_end_to_end.py)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" test_delete_debug.py)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" test_endpoint_debug.py)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -m uvicorn main:app --host 127.0.0.1 --port 8000 --reload)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" test_model_union.py)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" test_chat_enhanced.py)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -c \"\nimport requests\n\n# Check metadata debug endpoint\nresponse = requests.get(''http://127.0.0.1:8000/api/chat/debug/metadata'')\nprint(''Status:'', response.status_code)\nprint(''Metadata:'', response.json())\n\")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" test_metadata_check.py)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -m uvicorn main:app --host 127.0.0.1 --port 8000 --reload)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" test_upload_performance.py)",
      "Bash(wmic process where:*)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" main.py)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -c \"\nimport sys\nsys.path.append(''.'')\nfrom main import app\nprint(''App created successfully'')\n\")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" \"C:\\Projects\\enhanced-RAG-3\\start_server.py\")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -c \"\nimport requests\nimport time\nimport threading\nimport os\nimport sys\n\n# Add backend to path\nbackend_dir = os.path.join(''C:'', ''Projects'', ''enhanced-RAG-3'', ''backend'')\nsys.path.insert(0, backend_dir)\nos.chdir(backend_dir)\n\n# Test if we can reach the server\ntry:\n    response = requests.get(''http://127.0.0.1:8000/'', timeout=5)\n    print(''Server response:'', response.status_code)\n    print(''Response body:'', response.json())\nexcept Exception as e:\n    print(''Server not reachable:'', str(e))\n\")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -c \"\nimport requests\ntry:\n    response = requests.get(''http://localhost:8000/'', timeout=5)\n    print(''Server response:'', response.status_code)\n    print(''Response body:'', response.text[:200])\nexcept Exception as e:\n    print(''Server not reachable:'', str(e))\n\")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\pip.exe\" install pydantic-settings)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -c \"from langchain_ollama import OllamaLLM, OllamaEmbeddings; print(''Successfully imported OllamaLLM and OllamaEmbeddings'')\")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" \"C:\\Projects\\enhanced-RAG-3\\run_server.py\")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -c \"\nimport os\nimport sys\nsys.path.insert(0, ''C:/Projects/enhanced-RAG-3/backend'')\nos.chdir(''C:/Projects/enhanced-RAG-3/backend'')\n\ntry:\n    from main import app\n    print(''SUCCESS: App imported from main.py'')\n    \n    from app.core.config import settings\n    print(''SUCCESS: Config imported'')\n    \n    from app.services.qdrant_service import QdrantService\n    print(''SUCCESS: QdrantService imported'')\n    \n    from app.services.ollama_service import OllamaService  \n    print(''SUCCESS: OllamaService imported'')\n    \n    print(''All imports successful - server should start'')\n    \nexcept Exception as e:\n    print(''ERROR:'', str(e))\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -c \"\nimport os\nimport sys\nsys.path.insert(0, ''C:/Projects/enhanced-RAG-3/backend'')\nos.chdir(''C:/Projects/enhanced-RAG-3/backend'')\n\nimport uvicorn\nprint(''Starting server in test mode...'')\n\ntry:\n    uvicorn.run(\n        ''main:app'',\n        host=''127.0.0.1'',\n        port=8000,\n        reload=False,\n        log_level=''debug''\n    )\nexcept KeyboardInterrupt:\n    print(''Server stopped'')\nexcept Exception as e:\n    print(''Server error:'', str(e))\n\")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -c \"\nimport requests\nimport time\nimport threading\nimport os\nimport sys\n\n# Add backend to path\nbackend_dir = os.path.join(''C:'', ''Projects'', ''enhanced-RAG-3'', ''backend'')\nsys.path.insert(0, backend_dir)\nos.chdir(backend_dir)\n\n# Test if we can reach the server\ntry:\n    response = requests.get(''http://127.0.0.1:8000/'', timeout=5)\n    print(''Server response:'', response.status_code)\n    print(''Response body:'', response.json())\nexcept Exception as e:\n    print(''Server not reachable:'', str(e))\n\")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -c \"\nimport os\nimport sys\nsys.path.insert(0, ''C:/Projects/enhanced-RAG-3/backend'')\nos.chdir(''C:/Projects/enhanced-RAG-3/backend'')\n\nimport uvicorn\nuvicorn.run(''main:app'', host=''0.0.0.0'', port=8000, reload=True)\n\")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -c "\nimport os\nimport sys\nimport uvicorn\n\n# Set up paths\nsys.path.insert(0, ''C:/Projects/enhanced-RAG-3/backend'')\nos.chdir(''C:/Projects/enhanced-RAG-3/backend'')\n\nprint(''Starting Enhanced RAG Backend...'')\nprint(''Directory:'', os.getcwd())\n\n# Import the app to ensure it works\nfrom main import app\nprint(''FastAPI app loaded successfully'')\n\n# Start server with explicit settings\nuvicorn.run(\n    app,\n    host=''0.0.0.0'',\n    port=8000,\n    reload=False,\n    log_level=''info'',\n    access_log=True\n)\n")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -c "\nimport requests\nimport time\n\n# Wait a moment for server to be fully ready\ntime.sleep(2)\n\ntry:\n    response = requests.get(''http://localhost:8000/'', timeout=10)\n    print(''Root endpoint:'', response.status_code)\n    print(''Response:'', response.json())\n    \n    health_response = requests.get(''http://localhost:8000/api/health'', timeout=10)\n    print(''Health endpoint:'', health_response.status_code)\n    print(''Health response:'', health_response.json())\n    \nexcept Exception as e:\n    print(''Backend test failed:'', str(e))\n")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -m uvicorn main:app --host 127.0.0.1 --port 8000)",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -c "\nimport requests\ntry:\n    response = requests.get(''http://127.0.0.1:8000/'', timeout=10)\n    print(''SUCCESS - Backend root endpoint:'', response.status_code)\n    print(''Response:'', response.json())\n    \n    health_response = requests.get(''http://127.0.0.1:8000/api/health'', timeout=10)\n    print(''SUCCESS - Health endpoint:'', health_response.status_code)\n    print(''Health response:'', health_response.json())\n    \nexcept Exception as e:\n    print(''Backend test failed:'', str(e))\n")",
      "Bash(\"C:\\Projects\\enhanced-RAG-3\\venv\\Scripts\\python.exe\" -c "\nimport requests\nimport json\n\ntry:\n    # Test root endpoint\n    root_response = requests.get(''http://localhost:8000/'', timeout=10)\n    print(''Root endpoint:'', root_response.status_code)\n    print(''Response:'', root_response.json())\n    \n    # Test health endpoint\n    health_response = requests.get(''http://localhost:8000/api/health'', timeout=10)\n    print(''Health endpoint:'', health_response.status_code)\n    print(''Health response:'', health_response.json())\n    \n    # Test session creation\n    session_data = {''title'': ''Test Session''}\n    session_response = requests.post(''http://localhost:8000/api/chat/sessions'', \n                                   json=session_data, timeout=10)\n    print(''Session creation:'', session_response.status_code)\n    if session_response.status_code == 200:\n        print(''Session response:'', session_response.json())\n    else:\n        print(''Session error:'', session_response.text)\n        \nexcept Exception as e:\n    print(''Backend test failed:'', str(e))\n")"
    ],
    "deny": []
  }
}